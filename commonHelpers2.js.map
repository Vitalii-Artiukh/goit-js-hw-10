{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-snackbar.js"],"sourcesContent":["import iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst form = document.querySelector('.form');\nconsole.dir(form);\n\nconst execute = event => {\n  event.preventDefault();\n  // const executeValue = form.elements.state.value;\n  const numberEntered = form.elements.delay.value;\n  console.log(numberEntered);\n  form.reset();\n  return new Promise((resolve, reject) => {\n    if (numberEntered >= 0) {\n      setTimeout(() => {\n        if (numberEntered >= 0) {\n          resolve(numberEntered);\n        } else {\n          console.log('ne tot nomer');\n        }\n      }, numberEntered);\n    }\n  });\n};\n\nform.addEventListener('submit', execute);\n\n/////////////////////////////////////////\n\n// За допомогою prompt запропонуйте користувачу ввести значення.\n// Створіть функцію checkValue(value), всередині якої буде Promise\n// Якщо введене користувачем значення не є числом, потрібно відхилити проміс і логувати 'error'\n// Якщо введене користувачем значення є число і воно парне, розв'язуй проміс і повертай 'even'\n// через 1 секунду.\n// Якщо введене користувачем значення є число і воно не парне, розв'язуй проміс і повертай 'odd'\n// через 2 секунди.\n\n// const value = prompt('Введіть число');\n// console.log(value);\n\n// function checkValue(value) {\n//   return new Promise((resolve, reject) => {\n//     if (!isNaN(value)) {\n//       value % 2 === 0\n//         ? setTimeout(() => {\n//             resolve('парне число');\n//           }, 1000)\n//         : setTimeout(() => {\n//             resolve('не парне число');\n//           }, 2000);\n//     } else {\n//       reject('error');\n//     }\n//   });\n// }\n\n// checkValue(value)\n//   .then(value => {\n//     console.log(value);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n///////////////////////////////////////////////\n\n// Створіть функцію delayedPromise, яка приймає час затримки(у мілісекундах)\n// та повертає проміс.Цей проміс має виконатися після вказаної затримки і\n// вивести повідомлення в консоль \"Пройшло delay мілісекунд\n// якщо переданий аргумент не є числом логуй повідомлення про помилку\n// 'Затримка має бути числом'\n\n// function delayPromise(delay) {\n//   return new Promise((resolve, reject) => {\n//     if (typeof delay === 'number') {\n//       setTimeout(() => {\n//         resolve(delay);\n//       }, 2000);\n//     } else {\n//       reject('Нема результату');\n//     }\n//   });\n// }\n\n// delayPromise(2000)\n//   .then(delay => {\n//     console.log(`Пройшло ${delay} мілісекунд`);\n//   })\n//   .catch(error => {\n//     console.log(error);\n//   });\n\n////////////////////////////////////////////////\n\niziToast.show({\n  //   title: 'Hey',\n  message: '✅ Fulfilled promise in ${ delay } ms',\n  messageColor: '#ffffff', // text\n  //   color: 'red',\n  backgroundColor: 'red',\n  closeOnEscape: true,\n  position: 'topRight',\n  timeout: 20000,\n});\n\n//✅ Fulfilled promise in ${ delay } ms`\n\n//❌ Rejected promise in ${delay}ms`\n"],"names":["form","execute","event","numberEntered","resolve","reject","iziToast"],"mappings":"wIAGA,MAAMA,EAAO,SAAS,cAAc,OAAO,EAC3C,QAAQ,IAAIA,CAAI,EAEhB,MAAMC,EAAUC,GAAS,CACvBA,EAAM,eAAc,EAEpB,MAAMC,EAAgBH,EAAK,SAAS,MAAM,MAC1C,eAAQ,IAAIG,CAAa,EACzBH,EAAK,MAAK,EACH,IAAI,QAAQ,CAACI,EAASC,IAAW,CAClCF,GAAiB,GACnB,WAAW,IAAM,CACXA,GAAiB,EACnBC,EAAQD,CAAa,EAErB,QAAQ,IAAI,cAAc,CAE7B,EAAEA,CAAa,CAEtB,CAAG,CACH,EAEAH,EAAK,iBAAiB,SAAUC,CAAO,EAqEvCK,EAAS,KAAK,CAEZ,QAAS,uCACT,aAAc,UAEd,gBAAiB,MACjB,cAAe,GACf,SAAU,WACV,QAAS,GACX,CAAC"}